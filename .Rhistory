R: a lisp in C's clothing
========================================================
author: Tony Fischetti
date: 2020-02-10
autosize: true
R: a lisp in C's clothing
========================================================
author: Tony Fischetti
date: 2020-02-10
autosize: true
![lisp-prototype-theory](./media/lisp-prototype-theory.jpg
# Chunk 1: setup
knitr::opts_chunk$set(fig.align = 'center', dev = "svg", out.width = "90%",
echo = FALSE, comment = "")
options(width = 70)
# Chunk 2
summary(cars)
# Chunk 3
plot(cars)
# Chunk 4
knitr::include_graphics("./media/lisp-prototype-theory.jpg", dpi=NULL)
install.packages(c("lubridate", "dplyr", "ggplot2", "tidyr", "glmnet", "rstan"))
install.packages("rmarkdown")
install.packages("assertr")
install.packages("readr")
install.packages("rstan")
install.packages(c("evaluate", "digest", "highr", "markdown", "yaml"))
install.packages(c("knitr", "jsonlite", "base64enc", "mime", "rmarkdown"))
install.packages("boot")
but first
========================================================
type: prompt
R: a lisp in C's clothing
========================================================
author: Tony Fischetti
date: 2020-02-10
autosize: true
css: style.css
instagram: @tony_fischetti_art
blog: onthelambda.com
book: data analysis with r
but first
========================================================
type: prompt
talk outline
========================================================
incremental: true
<br>
- a brief history of R
- a little bit o' R
- case studies in R meta-programming
- lisp and R homologues
- is R a lisp?
- german compound word time!
- case study in probabilistic programming
a brief history of R
========================================================
type: prompt
a little bit o' R
========================================================
type: prompt
case studies in R meta-programming
========================================================
type: prompt
lisp and R homologues
========================================================
incremental: true
<br>
- `on.exit` &nbsp;&nbsp;&nbsp;&nbsp; `unwind-protect`
- `eval` &nbsp;&nbsp;&nbsp;&nbsp; `eval`
- `do.call` &nbsp;&nbsp;&nbsp;&nbsp; `funcall` &nbsp;&nbsp;&nbsp;&nbsp; `apply`
- `quote` &nbsp;&nbsp;&nbsp;&nbsp; `quote`
- `bquote` &nbsp;&nbsp;&nbsp;&nbsp; `<backquote>`
- `parse` &nbsp;&nbsp;&nbsp;&nbsp; `read`/`read-from-string`
- `as.symbol` &nbsp;&nbsp;&nbsp;&nbsp; `intern`/`read-from-string`
What makes a lisp? (the naïve approach)
========================================================
incremental: true
<br>
- dynamic typing and garbage collection
- homoiconicity (lets you treat code as data)
- lexical scoping?
What makes a lisp? (the naïve approach)
========================================================
transition-speed: fast
<br>
- dynamic typing and garbage collection
- homoiconicity (lets you treat code as data)
- ~~lexical scoping~~
What makes a lisp? (the naïve approach)
========================================================
transition-speed: fast
<br>
- dynamic typing and garbage collection
- homoiconicity (lets you treat code as data)
- ~~lexical scoping~~
- s-expressions?
What makes a lisp? (the naïve approach)
========================================================
transition-speed: fast
<br>
- dynamic typing and garbage collection
- homoiconicity (lets you treat code as data)
- ~~lexical scoping~~
- ~~s-expressions~~
compound german word time!
========================================================
type: prompt
class: single-image
<br>
<br>
<br>
familienähnlichkeit
prototype concept theory
========================================================
class: single-image
```{r, echo=FALSE, out.height="70%", out.width="70%"}
knitr::include_graphics("./media/lisp-prototype-theory.jpg", dpi=NULL)
```
